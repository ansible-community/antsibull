---
- name: Clean up virtualenv if necessary
  ansible.builtin.file:
    path: "{{ antsibull_ansible_venv }}"
    state: absent
  when: antsibull_venv_cleanup | bool

- name: Install the release tarball in a virtualenv so we can test it
  ansible.builtin.pip:
    name: "file://{{ _release_archive }}"
    state: present
    virtualenv: "{{ antsibull_ansible_venv }}"
    virtualenv_command: "{{ ansible_python.executable }} -m venv"

# Note: the version of ansible-base doesn't necessarily match the deps file since the version requirement is >=
- block:
    - name: Retrieve the expected minimum version of ansible-base
      shell: >-
        grep _ansible_base_version {{ antsibull_data_dir }}/{{ antsibull_deps_file }} | awk '{print $2}'
      changed_when: false
      register: _expected_ansible_base

    - name: Retrieve the installed version of ansible-base
      shell: >-
        {{ antsibull_ansible_venv }}/bin/pip show ansible-base | awk '/Version/ {print $2}'
      changed_when: false
      register: _installed_ansible_base

    - name: Validate the version of ansible-base
      ansible.builtin.assert:
        that:
          - _installed_ansible_base.stdout is version(_expected_ansible_base.stdout, '>=')
        success_msg: "ansible-base {{ _installed_ansible_base.stdout }} matches (or exceeds) {{ antsibull_deps_file }}"
        fail_msg: "ansible-base {{ _installed_ansible_base.stdout }} does not match {{ antsibull_deps_file }}"

- block:
    - name: Retrieve expected versions of Ansible and collections
      command: cat {{ antsibull_data_dir }}/{{ antsibull_deps_file }}
      changed_when: false
      register: _expected_versions

    - name: Retrieve the installed version of ansible
      shell: >-
        {{ antsibull_ansible_venv }}/bin/pip show ansible | awk '/Version/ {print $2}'
      changed_when: false
      register: _installed_ansible

    - name: Validate the version of ansible
      ansible.builtin.assert:
        that:
          - "'_ansible_version: {{ _installed_ansible.stdout }}' in _expected_versions.stdout"
        success_msg: "ansible {{ _installed_ansible.stdout }} matches {{ antsibull_deps_file }}"
        fail_msg: "ansible {{ _installed_ansible.stdout }} does not match {{ antsibull_deps_file }}"

    - name: Retrieve installed collections
      vars:
        _python_version: "{{ ansible_python.version.major }}.{{ ansible_python.version.minor }}"
      environment:
        # In case we happen to be testing with devel, don't print a warning about it
        ANSIBLE_DEVEL_WARNING: false
        # Until https://github.com/ansible/ansible/pull/70173 is backported and released
        ANSIBLE_COLLECTIONS_PATH: "{{ antsibull_ansible_venv }}/lib/python{{ _python_version }}/site-packages/ansible_collections"
      # List collections, remove empty lines, headers, file paths and format the results in the same way as the deps file
      shell: >-
        {{ antsibull_ansible_venv }}/bin/ansible-galaxy collection list | egrep -v '^$|^#|---|Collection.*Version' | awk '{ print $1 ": " $2 }'
      changed_when: false
      register: _installed_collections

    - name: Validate that the installed collections are the expected ones
      ansible.builtin.assert:
        that:
          - item in _expected_versions.stdout
        success_msg: "{{ item }} matches {{ antsibull_deps_file }}"
        fail_msg: "{{ item }} does not match {{ antsibull_deps_file }}"
      loop: "{{ _installed_collections.stdout_lines }}"

- name: Clone the ansible git repository
  ansible.builtin.git:
    repo: "https://github.com/ansible/ansible"
    dest: "{{ antsibull_ansible_git_dir }}"
    version: "{{ antsibull_ansible_git_version }}"
    depth: 1

- name: Run a simple ad-hoc integration test
  environment:
    ANSIBLE_ROLES_PATH: "{{ antsibull_ansible_git_dir }}/test/integration/targets"
  # Note: this didn't work prior to ansible-base 2.10.4: https://github.com/ansible/ansible/pull/71824
  command: >-
    {{ antsibull_ansible_venv }}/bin/ansible -vv localhost -m include_role -a "name=include_vars"
  changed_when: false

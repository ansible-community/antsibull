---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Clean up virtualenv if necessary
  ansible.builtin.file:
    path: "{{ antsibull_ansible_venv }}"
    state: absent
  when: antsibull_venv_cleanup | bool

- name: Get Ansible python fact
  ansible.builtin.setup:
    filter: ansible_python

- name: Set a python version fact appropriate for the venv site-packages
  ansible.builtin.set_fact:
    _python_version: "python{{ ansible_python.version.major }}.{{ ansible_python.version.minor }}"

- name: Install the release tarball in a virtualenv so we can test it
  ansible.builtin.pip:
    name: "file://{{ _release_archive }}"
    state: present
    virtualenv: "{{ antsibull_ansible_venv }}"
    virtualenv_command: "{{ ansible_python.executable }} -m venv"

# Note: the version of ansible-core doesn't necessarily match the deps file since the version requirement is >=
- block:
    - name: Load deps_file
      ansible.builtin.set_fact:
        _deps: >-
          {{ lookup('file', antsibull_data_dir ~ '/' ~ _deps_file) | _antsibull_parse_deps }}

    - name: Query installed pip packages
      community.general.pip_package_info:
        clients: "{{ antsibull_venv_pip_bin }}"
      register: _pip_pkgs

    - name: Validate the version of ansible-core
      ansible.builtin.assert:
        that:
          - antsibull_venv_pip_ansible_core_version is _antsibull_packaging_version(antsibull_expected_ansible_core, '>=')
        success_msg: "ansible-core {{ antsibull_venv_pip_ansible_core_version }} matches (or exceeds) {{ _deps_file }}"
        fail_msg: "ansible-core {{ antsibull_venv_pip_ansible_core_version }} does not match {{ _deps_file }}"

- block:
    - name: Retrieve collections that should be included in the package
      shell: cat {{ antsibull_data_dir }}/ansible.in | grep -vE "^#"
      changed_when: false
      register: _included_collections

    - name: Retrieve the builtin reported version of ansible
      ansible.builtin.command: >-
        {{ antsibull_ansible_venv }}/bin/python3 -c 'from ansible_collections.ansible_release import ansible_version; print(ansible_version)'
      changed_when: false
      register: _ansible_version_builtin

    - name: Validate the version of ansible
      ansible.builtin.assert:
        that:
          - antsibull_venv_pip_ansible_version == _deps['_ansible_version']
          - antsibull_venv_pip_ansible_version == _ansible_version_builtin.stdout
        success_msg: "ansible {{ antsibull_venv_pip_ansible_version }} matches {{ _deps_file }} as well as 'ansible_collections.ansible_release'"
        fail_msg: "ansible {{ antsibull_venv_pip_ansible_version }} does not match {{ _deps_file }} or 'ansible_collections.ansible_release'"

    - when: antsibull_ansible_version is _antsibull_packaging_version('6.0.0rc1', '>=')
      block:
        - name: Retrieve the builtin reported version of ansible from the ansible-community CLI tool
          ansible.builtin.command: >-
            {{ antsibull_ansible_venv }}/bin/ansible-community --version
          changed_when: false
          register: _ansible_version_builtin_2

        - name: Verify that the version output matches the one we expect
          ansible.builtin.assert:
            that:
              - _ansible_version_builtin_2.stdout == ("Ansible community version " ~ antsibull_ansible_version)

    - name: Retrieve installed collections
      environment:
        # In case we happen to be testing with devel, don't print a warning about it
        ANSIBLE_DEVEL_WARNING: false
        # Until https://github.com/ansible/ansible/pull/70173 is backported and released
        ANSIBLE_COLLECTIONS_PATH: "{{ antsibull_collections_path }}"
      # List collections, remove empty lines, headers, file paths and format the results in the same way as the deps file
      ansible.builtin.command:
        cmd: "{{ antsibull_ansible_venv }}/bin/ansible-galaxy collection list --format json"
      changed_when: false
      register: _installed_collections_json

    - name: Validate that the installed collections are the expected ones
      ansible.builtin.assert:
        that:
          - item['value']['version'] == _deps[item['key']]
        success_msg: "{{ item }} matches {{ _deps_file }}"
        fail_msg: "{{ item }} does not match {{ _deps_file }}"
      loop: "{{ antsibull_installed_collections | dict2items }}"

    - name: Validate that included collections are packaged
      ansible.builtin.assert:
        that:
          - item in antsibull_installed_collections
        success_msg: "{{ item }} is in ansible.in and inside the package"
        fail_msg: "{{ item }} is in ansible.in but not inside the package. Maybe run 'antsibull-build new-ansible --data-dir={{ antsibull_data_dir }}' to update ansible.in and then rebuild ?"
      loop: "{{ _included_collections.stdout_lines }}"

- name: Run nested tests
  vars:
    ansible_collections_path: "{{ antsibull_sdist_dir }}/ansible_collections"
  environment:
    ANSIBLE_COLLECTIONS_PATH: "{{ ansible_collections_path }}"
  block:
    - name: Create a temporary COLLECTIONS_PATH
      ansible.builtin.file:
        path: "{{ ansible_collections_path }}"
        state: directory

    - name: Install community.general for tests using 'a_module' and 'collection_version'
      ansible.builtin.command: >-
        {{ antsibull_ansible_venv }}/bin/ansible-galaxy collection install community.general

    - name: Run nested Ansible tests with the Ansible we just built
      ansible.builtin.command: >-
        {{ antsibull_ansible_venv }}/bin/ansible-playbook -i 'localhost,' --connection=local
          -e antsibull_sdist_dir="{{ antsibull_sdist_dir }}"
          -e antsibull_ansible_venv="{{ antsibull_ansible_venv }}"
          -e _python_version="{{ _python_version }}"
          {{ playbook_dir }}/nested-ansible-tests.yaml

---
- name: Clean up virtualenv if necessary
  ansible.builtin.file:
    path: "{{ antsibull_ansible_venv }}"
    state: absent
  when: antsibull_venv_cleanup | bool

- name: Get Ansible python fact
  setup:
    filter: ansible_python

- name: Install the release tarball in a virtualenv so we can test it
  ansible.builtin.pip:
    name: "file://{{ _release_archive }}"
    state: present
    virtualenv: "{{ antsibull_ansible_venv }}"
    virtualenv_command: "{{ ansible_python.executable }} -m venv"

# Note: the version of ansible-core doesn't necessarily match the deps file since the version requirement is >=
- block:
    # Note: the value is still called _ansible_base_version in the deps file
    # ex: https://github.com/ansible-community/ansible-build-data/blob/main/4/ansible-4.4.0.deps
    - name: Retrieve the expected minimum version of ansible-core
      shell: >-
        grep _ansible_base_version {{ antsibull_data_dir }}/{{ _deps_file }} | awk '{print $2}'
      changed_when: false
      register: _expected_ansible_core

    - name: Retrieve the installed version of ansible-core
      shell: >-
        {{ antsibull_ansible_venv }}/bin/pip show ansible-core | awk '/Version/ {print $2}'
      changed_when: false
      register: _installed_ansible_core

    - name: Validate the version of ansible-core
      ansible.builtin.assert:
        that:
          - _installed_ansible_core.stdout is version(_expected_ansible_core.stdout, '>=')
        success_msg: "ansible-core {{ _installed_ansible_core.stdout }} matches (or exceeds) {{ _deps_file }}"
        fail_msg: "ansible-core {{ _installed_ansible_core.stdout }} does not match {{ _deps_file }}"

- block:
    - name: Retrieve expected versions of Ansible and collections
      command: cat {{ antsibull_data_dir }}/{{ _deps_file }}
      changed_when: false
      register: _expected_versions

    - name: Retrieve collections that should be included in the package
      shell: cat {{ antsibull_data_dir }}/ansible.in | egrep -v "^#"
      changed_when: false
      register: _included_collections

    - name: Retrieve the installed version of ansible
      shell: >-
        {{ antsibull_ansible_venv }}/bin/pip show ansible | awk '/Version/ {print $2}'
      changed_when: false
      register: _installed_ansible

    - name: Validate the version of ansible
      ansible.builtin.assert:
        that:
          - "'_ansible_version: {{ _installed_ansible.stdout }}' in _expected_versions.stdout"
        success_msg: "ansible {{ _installed_ansible.stdout }} matches {{ _deps_file }}"
        fail_msg: "ansible {{ _installed_ansible.stdout }} does not match {{ _deps_file }}"

    - name: Retrieve installed collections
      vars:
        _python_version: "{{ ansible_python.version.major }}.{{ ansible_python.version.minor }}"
      environment:
        # In case we happen to be testing with devel, don't print a warning about it
        ANSIBLE_DEVEL_WARNING: false
        # Until https://github.com/ansible/ansible/pull/70173 is backported and released
        ANSIBLE_COLLECTIONS_PATH: "{{ antsibull_ansible_venv }}/lib/python{{ _python_version }}/site-packages/ansible_collections"
      # List collections, remove empty lines, headers, file paths and format the results in the same way as the deps file
      shell: >-
        {{ antsibull_ansible_venv }}/bin/ansible-galaxy collection list | egrep -v '^$|^#|---|Collection.*Version' | awk '{ print $1 ": " $2 }'
      changed_when: false
      register: _installed_collections

    - name: Validate that the installed collections are the expected ones
      ansible.builtin.assert:
        that:
          - item in _expected_versions.stdout
        success_msg: "{{ item }} matches {{ _deps_file }}"
        fail_msg: "{{ item }} does not match {{ _deps_file }}"
      loop: "{{ _installed_collections.stdout_lines }}"

    - name: Validate that included collections are packaged
      ansible.builtin.assert:
        that:
          - item in _installed_collections.stdout
        success_msg: "{{ item }} is in ansible.in and inside the package"
        fail_msg: "{{ item }} is in ansible.in but not inside the package. Maybe run 'antsibull-build new-ansible --data-dir={{ antsibull_data_dir }}' to update ansible.in and then rebuild ?"
      loop: "{{ _included_collections.stdout_lines }}"

- name: Clone the ansible git repository
  ansible.builtin.git:
    repo: "https://github.com/ansible/ansible"
    dest: "{{ antsibull_ansible_git_dir }}"
    version: "{{ antsibull_ansible_git_version }}"
    depth: 1

- name: Run a simple ad-hoc integration test
  environment:
    ANSIBLE_ROLES_PATH: "{{ antsibull_ansible_git_dir }}/test/integration/targets"
  # Note: this didn't work prior to ansible-base 2.10.4: https://github.com/ansible/ansible/pull/71824
  command: >-
    {{ antsibull_ansible_venv }}/bin/ansible -vv localhost -m include_role -a "name=include_vars"
  changed_when: false

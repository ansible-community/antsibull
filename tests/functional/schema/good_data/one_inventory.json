{
    "amazon.aws.aws_ec2": {
        "doc": {
            "author": [
                "Sloane Hertel (@s-hertel)"
            ],
            "description": [
                "Get inventory hosts from Amazon Web Services EC2.",
                "Uses a YAML configuration file that ends with C(aws_ec2.(yml|yaml))."
            ],
            "filename": "/var/tmp/tmpku7m9k3e/installed/ansible_collections/amazon/aws/plugins/inventory/aws_ec2.py",
            "name": "aws_ec2",
            "notes": [
                "If no credentials are provided and the control node has an associated IAM instance profile then the role will be used for authentication."
            ],
            "options": {
                "aws_access_key": {
                    "aliases": [
                        "aws_access_key_id"
                    ],
                    "description": "The AWS access key to use.",
                    "env": [
                        {
                            "name": "EC2_ACCESS_KEY"
                        },
                        {
                            "name": "AWS_ACCESS_KEY"
                        },
                        {
                            "name": "AWS_ACCESS_KEY_ID"
                        }
                    ],
                    "type": "str"
                },
                "aws_profile": {
                    "aliases": [
                        "boto_profile"
                    ],
                    "description": "The AWS profile",
                    "env": [
                        {
                            "name": "AWS_DEFAULT_PROFILE"
                        },
                        {
                            "name": "AWS_PROFILE"
                        }
                    ],
                    "type": "str"
                },
                "aws_secret_key": {
                    "aliases": [
                        "aws_secret_access_key"
                    ],
                    "description": "The AWS secret key that corresponds to the access key.",
                    "env": [
                        {
                            "name": "EC2_SECRET_KEY"
                        },
                        {
                            "name": "AWS_SECRET_KEY"
                        },
                        {
                            "name": "AWS_SECRET_ACCESS_KEY"
                        }
                    ],
                    "type": "str"
                },
                "aws_security_token": {
                    "description": "The AWS security token if using temporary access and secret keys.",
                    "env": [
                        {
                            "name": "EC2_SECURITY_TOKEN"
                        },
                        {
                            "name": "AWS_SESSION_TOKEN"
                        },
                        {
                            "name": "AWS_SECURITY_TOKEN"
                        }
                    ],
                    "type": "str"
                },
                "cache": {
                    "default": false,
                    "description": [
                        "Toggle to enable/disable the caching of the inventory's source data, requires a cache plugin setup to work."
                    ],
                    "env": [
                        {
                            "name": "ANSIBLE_INVENTORY_CACHE"
                        }
                    ],
                    "ini": [
                        {
                            "key": "cache",
                            "section": "inventory"
                        }
                    ],
                    "type": "bool"
                },
                "cache_connection": {
                    "description": [
                        "Cache connection data or path, read cache plugin documentation for specifics."
                    ],
                    "env": [
                        {
                            "name": "ANSIBLE_CACHE_PLUGIN_CONNECTION"
                        },
                        {
                            "name": "ANSIBLE_INVENTORY_CACHE_CONNECTION"
                        }
                    ],
                    "ini": [
                        {
                            "key": "fact_caching_connection",
                            "section": "defaults"
                        },
                        {
                            "key": "cache_connection",
                            "section": "inventory"
                        }
                    ],
                    "type": "str"
                },
                "cache_plugin": {
                    "default": "memory",
                    "description": [
                        "Cache plugin to use for the inventory's source data."
                    ],
                    "env": [
                        {
                            "name": "ANSIBLE_CACHE_PLUGIN"
                        },
                        {
                            "name": "ANSIBLE_INVENTORY_CACHE_PLUGIN"
                        }
                    ],
                    "ini": [
                        {
                            "key": "fact_caching",
                            "section": "defaults"
                        },
                        {
                            "key": "cache_plugin",
                            "section": "inventory"
                        }
                    ],
                    "type": "str"
                },
                "cache_prefix": {
                    "default": "ansible_inventory_",
                    "description": [
                        "Prefix to use for cache plugin files/tables"
                    ],
                    "env": [
                        {
                            "name": "ANSIBLE_CACHE_PLUGIN_PREFIX"
                        },
                        {
                            "name": "ANSIBLE_INVENTORY_CACHE_PLUGIN_PREFIX"
                        }
                    ],
                    "ini": [
                        {
                            "key": "fact_caching_prefix",
                            "section": "default"
                        },
                        {
                            "key": "cache_prefix",
                            "section": "inventory"
                        }
                    ]
                },
                "cache_timeout": {
                    "default": 3600,
                    "description": [
                        "Cache duration in seconds"
                    ],
                    "env": [
                        {
                            "name": "ANSIBLE_CACHE_PLUGIN_TIMEOUT"
                        },
                        {
                            "name": "ANSIBLE_INVENTORY_CACHE_TIMEOUT"
                        }
                    ],
                    "ini": [
                        {
                            "key": "fact_caching_timeout",
                            "section": "defaults"
                        },
                        {
                            "key": "cache_timeout",
                            "section": "inventory"
                        }
                    ],
                    "type": "int"
                },
                "compose": {
                    "default": {},
                    "description": "Create vars from jinja2 expressions.",
                    "type": "dict"
                },
                "filters": {
                    "default": {},
                    "description": [
                        "A dictionary of filter value pairs.",
                        "Available filters are listed here U(http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options)."
                    ],
                    "type": "dict"
                },
                "groups": {
                    "default": {},
                    "description": "Add hosts to group based on Jinja2 conditionals.",
                    "type": "dict"
                },
                "hostnames": {
                    "default": [],
                    "description": [
                        "A list in order of precedence for hostname variables.",
                        "You can use the options specified in U(http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html#options).",
                        "To use tags as hostnames use the syntax tag:Name=Value to use the hostname Name_Value, or tag:Name to use the value of the Name tag."
                    ],
                    "type": "list"
                },
                "iam_role_arn": {
                    "description": "The ARN of the IAM role to assume to perform the inventory lookup. You should still provide AWS credentials with enough privilege to perform the AssumeRole action."
                },
                "include_extra_api_calls": {
                    "default": false,
                    "description": [
                        "Add two additional API calls for every instance to include 'persistent' and 'events' host variables.",
                        "Spot instances may be persistent and instances may have associated events."
                    ],
                    "type": "bool"
                },
                "keyed_groups": {
                    "default": [],
                    "description": "Add hosts to group based on the values of a variable.",
                    "type": "list"
                },
                "plugin": {
                    "choices": [
                        "aws_ec2"
                    ],
                    "description": "Token that ensures this is a source file for the plugin.",
                    "required": true
                },
                "regions": {
                    "default": [],
                    "description": [
                        "A list of regions in which to describe EC2 instances.",
                        "If empty (the default) default this will include all regions, except possibly restricted ones like us-gov-west-1 and cn-north-1."
                    ],
                    "type": "list"
                },
                "strict": {
                    "default": false,
                    "description": [
                        "If C(yes) make invalid entries a fatal error, otherwise skip and continue.",
                        "Since it is possible to use facts in the expressions they might not always be available and we ignore those errors by default."
                    ],
                    "type": "bool"
                },
                "strict_permissions": {
                    "default": true,
                    "description": [
                        "By default if a 403 (Forbidden) error code is encountered this plugin will fail.",
                        "You can set this option to False in the inventory config file which will allow 403 errors to be gracefully skipped."
                    ],
                    "type": "bool"
                },
                "use_contrib_script_compatible_sanitization": {
                    "default": false,
                    "description": [
                        "By default this plugin is using a general group name sanitization to create safe and usable group names for use in Ansible. This option allows you to override that, in efforts to allow migration from the old inventory script and matches the sanitization of groups when the script's ``replace_dash_in_groups`` option is set to ``False``. To replicate behavior of ``replace_dash_in_groups = True`` with constructed groups, you will need to replace hyphens with underscores via the regex_replace filter for those entries.",
                        "For this to work you should also turn off the TRANSFORM_INVALID_GROUP_CHARS setting, otherwise the core engine will just use the standard sanitization on top.",
                        "This is not the default as such names break certain functionality as not all characters are valid Python identifiers which group names end up being used as."
                    ],
                    "type": "bool"
                }
            },
            "plugin_type": "inventory",
            "requirements": [
                "boto3",
                "botocore"
            ],
            "short_description": "EC2 inventory source"
        },
        "examples": "\n# Minimal example using environment vars or instance role credentials\n# Fetch all hosts in us-east-1, the hostname is the public DNS if it exists, otherwise the private IP address\nplugin: aws_ec2\nregions:\n  - us-east-1\n\n# Example using filters, ignoring permission errors, and specifying the hostname precedence\nplugin: aws_ec2\nboto_profile: aws_profile\n# Populate inventory with instances in these regions\nregions:\n  - us-east-1\n  - us-east-2\nfilters:\n  # All instances with their `Environment` tag set to `dev`\n  tag:Environment: dev\n  # All dev and QA hosts\n  tag:Environment:\n    - dev\n    - qa\n  instance.group-id: sg-xxxxxxxx\n# Ignores 403 errors rather than failing\nstrict_permissions: False\n# Note: I(hostnames) sets the inventory_hostname. To modify ansible_host without modifying\n# inventory_hostname use compose (see example below).\nhostnames:\n  - tag:Name=Tag1,Name=Tag2  # Return specific hosts only\n  - tag:CustomDNSName\n  - dns-name\n  - private-ip-address\n\n# Example using constructed features to create groups and set ansible_host\nplugin: aws_ec2\nregions:\n  - us-east-1\n  - us-west-1\n# keyed_groups may be used to create custom groups\nstrict: False\nkeyed_groups:\n  # Add e.g. x86_64 hosts to an arch_x86_64 group\n  - prefix: arch\n    key: 'architecture'\n  # Add hosts to tag_Name_Value groups for each Name/Value tag pair\n  - prefix: tag\n    key: tags\n  # Add hosts to e.g. instance_type_z3_tiny\n  - prefix: instance_type\n    key: instance_type\n  # Create security_groups_sg_abcd1234 group for each SG\n  - key: 'security_groups|json_query(\"[].group_id\")'\n    prefix: 'security_groups'\n  # Create a group for each value of the Application tag\n  - key: tags.Application\n    separator: ''\n  # Create a group per region e.g. aws_region_us_east_2\n  - key: placement.region\n    prefix: aws_region\n  # Create a group (or groups) based on the value of a custom tag \"Role\" and add them to a metagroup called \"project\"\n  - key: tags['Role']\n    prefix: foo\n    parent_group: \"project\"\n# Set individual variables with compose\ncompose:\n  # Use the private IP address to connect to the host\n  # (note: this does not modify inventory_hostname, which is set via I(hostnames))\n  ansible_host: private_ip_address\n",
        "metadata": {
            "status": [
                "preview"
            ],
            "supported_by": "community"
        },
        "return": null
    }
}
